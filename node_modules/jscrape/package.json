{
  "name": "jscrape",
  "version": "0.0.4",
  "description": "jsdom + request + jquery for the truly lazy",
  "keywords": [
    "jquery",
    "scrape"
  ],
  "main": "./index.js",
  "dependencies": {
    "jsdom": ">= 0.2.14",
    "request": ">= 2.9.202"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hdachev/jscrape.git"
  },
  "readme": "# jscrape = jsdom + request + jquery for the truly lazy\r\n\r\n\r\n### Install\r\n\r\n    npm install jscrape\r\n\r\n\r\n### Be lazy\r\n\r\nUse the same way you'd use request,\r\npassing a url or request-options as the first param,\r\nand a `function(err, $, response, body)` callback,\r\nwhere `$` is the jQuery object for the parsed page:\r\n\r\n```javascript\r\nvar jscrape = require ( './index' );\r\njscrape ( 'http://www.google.com', function ( error, $, response, body ) {\r\n    if ( !error && $ ) {\r\n        // Print the innerHTML of the I'm Feeling Lucky button.\r\n        console.log( $( 'button[onclick^=if]' ).html () )\r\n    }\r\n})\r\n```\r\n\r\nOr just use a `function(err, $)`-style callback:\r\n\r\n```javascript\r\nvar jscrape = require ( \"./index\" );\r\nfunction getNews ( callback ) {\r\n    jscrape ( 'http://news.ycombinator.com/', function ( err, $ ) {\r\n        // jquery to the rescue\r\n        callback ( err, $ && $( 'span[id^=score]' ).map ( function () {\r\n            var link;\r\n            // some nested tables are better than others\r\n            return {\r\n                id      : num ( $( this ).attr ( 'id' ) ),\r\n                url     : ( link = $( this ).closest ( 'tr' ).prev ( 'tr' ).find ( 'td.title a' ) )\r\n                            .attr ( 'href' ),\r\n                title   : link.text (),\r\n                score   : num ( $( this ).text () )\r\n            }\r\n        }).get () )\r\n    })\r\n    function num ( str ) {\r\n        return Number ( String ( str ).replace ( /[^0-9]+/g, '' ) )\r\n    }\r\n}\r\ngetNews ( function ( err, news ) {\r\n    console.log ( err, news );\r\n})\r\n```\r\n\r\nWhen passing an object as the first param\r\nit's passed through directly to request.\r\nInstead, when passing in just a url string,\r\nits wrapped in a request options object\r\nthat has some sensible defaults\r\nfor a simple scraping setup,\r\nso you can be lazy.\r\nEnjoy!\r\n\r\n\r\n### Workaround for npm trouble with contextify on windows\r\n\r\nIf you can't `npm install jscrape` on windows\r\nbecause of contextify failing to build,\r\nclone the `contextify` repo under\r\n`your_project/node_modules/contextify`\r\nand replace the contents of `lib/contextify.js`\r\nwith the following:\r\n\r\n```javascript\r\nmodule.exports = function ( obj ) {\r\n    obj.getGlobal = function () {\r\n        return obj;\r\n    }\r\n};\r\n```\r\n\r\nNow `npm install jscrape`\r\nin your project folder should work just fine.\r\n",
  "readmeFilename": "README.md",
  "_id": "jscrape@0.0.4",
  "dist": {
    "shasum": "91430dc093371a9dd0eb23bed2f73729916965a2"
  },
  "_from": "jscrape@",
  "_resolved": "https://registry.npmjs.org/jscrape/-/jscrape-0.0.4.tgz"
}
